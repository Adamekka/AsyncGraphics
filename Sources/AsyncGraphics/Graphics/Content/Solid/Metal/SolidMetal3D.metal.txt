#include <metal_stdlib>
using namespace metal;

struct Uniforms {
    /*<uniforms>*/
    packed_float3 resolution;
};

float4 solidMetal3d_main(float3 uvw, uint3 size) {

    float u = uvw.x;
    float v = uvw.y;
    float w = uvw.z;
    
    uint width = size.x;
    uint height = size.y;
    uint depth = size.z;

    /*<code>*/
    
    return 0;
}

kernel void solidMetal3d(const device Uniforms& uniforms [[ buffer(0) ]],
                         texture3d<float, access::write>  targetTexture [[ texture(0) ]],
                         uint3 pos [[ thread_position_in_grid ]]) {
    
    uint width = targetTexture.get_width();
    uint height = targetTexture.get_height();
    uint depth = targetTexture.get_depth();
    uint3 size = uint3(width, height, depth);
    
    if (pos.x >= width || pos.y >= height || pos.z >= depth) {
        return;
    }
    
    float u = (float(pos.x) + 0.5) / float(width);
    float v = (float(pos.y) + 0.5) / float(height);
    float w = (float(pos.z) + 0.5) / float(depth);
    float3 uvw = float3(u, v, w);
    
    float4 color = solidMetal3d_main(uvw, size);
    
    targetTexture.write(color, pos);
}
